{"version":3,"sources":["logo.svg","components/customers.js","components/addcustomer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Customers","state","error","isLoaded","data","fetch","then","response","json","customer","setState","console","log","catch","this","map","key","customerId","productId","Component","Add","action","method","type","accept","capture","name","placeholder","App","className","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,8NC+G5BC,G,wBArEf,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACTC,MAAQ,KACRC,UAAW,EACXC,KAAO,IALA,E,iFAUO,IAAD,OAGjBC,MAAM,mCACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAEG,SAACF,GAEG,IAAIK,EAKFA,EAJEL,GACO,GAMX,EAAKM,SAAS,CACVP,UAAW,EAEXC,KAAKK,IAGP,kBAAME,QAAQC,IAAI,uBAAwBR,SAIhD,SAACF,GACG,EAAKQ,SAAS,CACVP,UAAU,EACVD,aAGVW,OAAM,kBAAMF,QAAQC,IAAI,wD,+BAI1B,OAAGE,KAAKb,MAAMC,MACH,iDACAY,KAAKb,MAAME,SAId,6BACE,2CAAoB,gDACpB,4BACCW,KAAKb,MAAMG,KAAKW,KAAI,SAAAN,GAAQ,OAE3B,wBAAIO,IAAKP,EAASO,KAAOP,EAASQ,WAAlC,IAA+CR,EAASS,gBARzD,gD,GAzFWC,cCWTC,E,iLAXX,OACI,0BAAMC,OAAO,mBAAmBC,OAAO,QACnC,2BAAOC,KAAK,OAAOC,OAAO,UAAUC,QAAQ,WAC5C,2BAAOC,KAAK,QAAQC,YAAY,SAChC,2BAAOD,KAAK,QAAQC,YAAY,SAChC,4BAAQJ,KAAK,UAAb,Y,GAPMJ,aCmBHS,E,iLAbX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,aAAd,0BAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATUV,aCOZc,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlC,MAAK,SAAAuC,GACJlC,QAAQC,IAAI,oBACZiC,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfyC,UAAUC,cAAcO,YAI1BvC,QAAQC,IACN,iHAKE6B,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBlC,QAAQC,IAAI,sCAGR6B,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BhC,OAAM,SAAAX,GACLS,QAAQT,MAAM,4CAA6CA,MC7FjEmD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIe,IAAIC,oBAAwBvB,OAAOC,SAASuB,MACpDC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMkB,oBAAN,sBAEPzB,IAoEV,SAAiCO,EAAOC,GAEtCpC,MAAMmC,GACHlC,MAAK,SAAAC,GAEJ,IAAMuD,EAAcvD,EAASwD,QAAQC,IAAI,gBAEnB,MAApBzD,EAAS0D,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAM7D,MAAK,SAAAuC,GACjCA,EAAauB,aAAa9D,MAAK,WAC7B6B,OAAOC,SAASiC,eAKpB9B,EAAgBC,EAAOC,MAG1B5B,OAAM,WACLF,QAAQC,IACN,oEAzFA0D,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAM7D,MAAK,WACjCK,QAAQC,IACN,iHAMJ2B,EAAgBC,EAAOC,WAK3B9B,QAAQC,IAAI,gCAAgC8C,cCxC5Cf,K","file":"static/js/main.644fe193.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './customers.css';\n\nclass Customers extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       error: null,\n//       isLoaded: false,\n//       customers: []\n//     };\n//   }\n\n//   componentDidMount() {\n//     fetch('/api/customers')\n//       .then(res => res.json())\n//       .then(\n//         (customers) => {\n//           this.setState({\n//             isLoaded: true,\n//             customers: customers\n//           });\n//         })\n//   }\n// render(){\n//   if(error){\n//     return <div>Error in loading</div>\n//   }else if (!isLoaded) {\n//     return <div>Loading ...</div>\n//   }else{\n//   return (\n//       <div>\n//         <h2>Customers</h2>\n//         <ul>\n//         {customers.map(customer => \n//           <li>{customer.fname} {customer.lname}</li>\n//         )}\n//         </ul>\n//       </div>\n//     );\n//   }\n// }\nconstructor(){\n  super();\n  this.state = {\n      error : null,\n      isLoaded : false,\n      data : []   \n  };\n}\n\n\ncomponentDidMount(){\n  // I will use fake api from jsonplaceholder website\n  // this return 100 posts \n  fetch('http://127.0.0.1:5000/recommend')\n  .then( response => response.json())\n  .then(\n      // handle the result\n      (data) => {\n         // console.log(customers)\n          var customer;\n          if(!data){\n            customer=[]\n          }\n          else{\n            customer=data\n            //console.log(customer)\n          }\n          this.setState({\n              isLoaded : true,\n              // if(!customers.data){\n              data:customer\n              // }\n          }\n          , () => console.log('Customers fetched...', data)\n          );\n      },\n      // Handle error \n      (error) => {\n          this.setState({\n              isLoaded: true,\n              error\n          })\n      },\n  ).catch(() => console.log(\"Canâ€™t access response. Blocked by browser?\"))\n}\nrender() {\n  // const {error, isLoaded, customers} = this.state;\n  if(this.state.error){\n      return <div>Error in loading</div>\n  }else if (!this.state.isLoaded) {\n      return <div>Loading ...</div>\n  }else{\n      return(\n          <div>\n            <h2>Customers  </h2><h4>Recommneded Item</h4>\n            <ul>\n            {this.state.data.map(customer =>\n              \n              <li key={customer.key} >{customer.customerId} {customer.productId}</li>\n              \n            )}\n            </ul>\n          </div>\n      );\n  }\n\n}\n}\n\nexport default Customers;\n","import React, { Component } from 'react';\nclass Add extends Component {\n  render() {\n    return (\n        <form action='/api/addCustomer' method=\"POST\">\n            <input type=\"file\" accept=\"image/*\" capture=\"camera\" />\n            <input name=\"fname\" placeholder=\"name\"></input>\n            <input name=\"lname\" placeholder=\"name\"></input>\n            <button type=\"submit\">Add</button>\n        </form>\n    );\n  }\n}\n\nexport default Add;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Customers from './components/customers';\nimport Add from './components/addcustomer';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">React Express Starter</h1>\n        </header>\n        <Add/>\n        <Customers />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n  else{\n    console.log(\"wont register sw current env:\",process.env.NODE_ENV)\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      console.log(\"sw is registered\")\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif(process.env.NODE_ENV==='development'){\n    serviceWorker.unregister()\n}\nelse{\n    serviceWorker.register();\n}"],"sourceRoot":""}